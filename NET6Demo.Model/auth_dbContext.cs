// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace NET6Demo.Model
{
    public partial class auth_dbContext : DbContext
    {
        public auth_dbContext()
        {
        }

        public auth_dbContext(DbContextOptions<auth_dbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<__efmigrationshistory> __efmigrationshistory { get; set; } = null!;
        public virtual DbSet<log> log { get; set; } = null!;
        public virtual DbSet<tb_info_licesen> tb_info_licesen { get; set; } = null!;
        public virtual DbSet<tb_info_org> tb_info_org { get; set; } = null!;
        public virtual DbSet<tb_info_orgtype> tb_info_orgtype { get; set; } = null!;
        public virtual DbSet<tb_info_power> tb_info_power { get; set; } = null!;
        public virtual DbSet<tb_info_roles> tb_info_roles { get; set; } = null!;
        public virtual DbSet<tb_info_status> tb_info_status { get; set; } = null!;
        public virtual DbSet<tb_info_user> tb_info_user { get; set; } = null!;
        public virtual DbSet<tb_map_role_power> tb_map_role_power { get; set; } = null!;
        public virtual DbSet<tb_map_user_org> tb_map_user_org { get; set; } = null!;
        public virtual DbSet<tb_map_user_power> tb_map_user_power { get; set; } = null!;
        public virtual DbSet<tb_map_user_roles> tb_map_user_roles { get; set; } = null!;
        public virtual DbSet<tb_rec_authorize> tb_rec_authorize { get; set; } = null!;
        public virtual DbSet<tb_rec_license> tb_rec_license { get; set; } = null!;
        public virtual DbSet<vw_org_license> vw_org_license { get; set; } = null!;
        public virtual DbSet<vw_org_user_power> vw_org_user_power { get; set; } = null!;
        public virtual DbSet<vw_org_user_role> vw_org_user_role { get; set; } = null!;
        public virtual DbSet<vw_role_power> vw_role_power { get; set; } = null!;
        public virtual DbSet<vw_user_role_power> vw_user_role_power { get; set; } = null!;

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.UseCollation("utf8_general_ci")
                .HasCharSet("utf8");

            modelBuilder.Entity<__efmigrationshistory>(entity =>
            {
                entity.HasKey(e => e.MigrationId)
                    .HasName("PRIMARY");
            });

            modelBuilder.Entity<tb_info_licesen>(entity =>
            {
                entity.Property(e => e.CreateAt)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("建立时间");

                entity.Property(e => e.CreateUserId).HasComment("建立用户");

                entity.Property(e => e.ModifyAt).HasComment("最后修改时间");

                entity.Property(e => e.ModifyUserId).HasComment("最后修改用户");

                entity.Property(e => e.Note).HasComment("授权类型说明");

                entity.Property(e => e.Typename).HasComment("授权类型名称");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.tb_info_licesen)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("tb_info_licesen_ibfk_1");
            });

            modelBuilder.Entity<tb_info_org>(entity =>
            {
                entity.Property(e => e.CreateAt).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.OrgCode).HasComment("组织编码");

                entity.Property(e => e.OrgName).HasComment("组织名称");

                entity.Property(e => e.OrgTypeId).HasComment("组织类型Id");

                entity.Property(e => e.StatusId).HasComment("状态ID");

                entity.HasOne(d => d.OrgType)
                    .WithMany(p => p.tb_info_org)
                    .HasForeignKey(d => d.OrgTypeId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("tb_info_org_ibfk_2");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.tb_info_org)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("tb_info_org_ibfk_1");
            });

            modelBuilder.Entity<tb_info_orgtype>(entity =>
            {
                entity.Property(e => e.CreateAt).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.Note).HasComment("说明");

                entity.Property(e => e.OrgTypeName).HasComment("组织类型名称");
            });

            modelBuilder.Entity<tb_info_power>(entity =>
            {
                entity.Property(e => e.CreateAt).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.FuncName).HasComment("权限方法");

                entity.Property(e => e.Note).HasComment("权限说明");

                entity.Property(e => e.PowerCode).HasComment("权限code");

                entity.Property(e => e.PowerModule).HasComment("权限模块");

                entity.Property(e => e.PowerName).HasComment("权限名称");

                entity.Property(e => e.StatusId).HasComment("状态Id");

                entity.Property(e => e.Url).HasComment("授权页面");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.tb_info_power)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("tb_info_power_ibfk_1");
            });

            modelBuilder.Entity<tb_info_roles>(entity =>
            {
                entity.Property(e => e.CreateAt).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.Note).HasComment("角色说明");

                entity.Property(e => e.RoleCode).HasComment("角色代码");

                entity.Property(e => e.RoleName).HasComment("角色名称");

                entity.Property(e => e.Status).HasComment("状态");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("tb_info_roles_ibfk_2");

                entity.HasOne(d => d.StatusNavigation)
                    .WithMany(p => p.tb_info_roles)
                    .HasForeignKey(d => d.Status)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("tb_info_roles_ibfk_1");
            });

            modelBuilder.Entity<tb_info_status>(entity =>
            {
                entity.Property(e => e.CreateAt).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.Note).HasComment("说明");

                entity.Property(e => e.StatusName).HasComment("状态名称");
            });

            modelBuilder.Entity<tb_info_user>(entity =>
            {
                entity.Property(e => e.CreateAt).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.IdNum).HasComment("身份证号");

                entity.Property(e => e.Nickname).HasComment("微信nickname");

                entity.Property(e => e.Status).HasComment("状态");

                entity.Property(e => e.UserCode).HasComment("用户代码");

                entity.Property(e => e.UserName).HasComment("用户名称（昵称）");

                entity.Property(e => e.WxOpenId).HasComment("微信OpendId");

                entity.Property(e => e.WxUnionId).HasComment("微信unionId");

                entity.Property(e => e.headimgurl).HasComment("微信头像headimgurl");

                entity.Property(e => e.password).HasComment("密码（密文）");

                entity.HasOne(d => d.StatusNavigation)
                    .WithMany(p => p.tb_info_user)
                    .HasForeignKey(d => d.Status)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("tb_info_user_ibfk_1");
            });

            modelBuilder.Entity<tb_map_role_power>(entity =>
            {
                entity.Property(e => e.CreateAt).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.PowerId).HasComment("权限ID");

                entity.Property(e => e.RoleId).HasComment("角色ID");

                entity.HasOne(d => d.Power)
                    .WithMany(p => p.tb_map_role_power)
                    .HasForeignKey(d => d.PowerId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("tb_map_role_power_ibfk_2");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.tb_map_role_power)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("tb_map_role_power_ibfk_1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.tb_map_role_power)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("tb_map_role_power_ibfk_3");
            });

            modelBuilder.Entity<tb_map_user_org>(entity =>
            {
                entity.Property(e => e.CreateAt).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.OrgId).HasComment("组织ID");

                entity.Property(e => e.UserId).HasComment("用户ID");

                entity.HasOne(d => d.Org)
                    .WithMany(p => p.tb_map_user_org)
                    .HasForeignKey(d => d.OrgId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("tb_map_user_org_ibfk_1");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.tb_map_user_org)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("tb_map_user_org_ibfk_3");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.tb_map_user_org)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("tb_map_user_org_ibfk_2");
            });

            modelBuilder.Entity<tb_map_user_power>(entity =>
            {
                entity.HasComment("用户权限是指用户的特殊权限，存在于用户角色之外的。如果在用户角色之内的，请通过角色获取，这里单指定特殊权限");

                entity.Property(e => e.CreateAt).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.PowerId).HasComment("权限ID");

                entity.Property(e => e.UserId).HasComment("用户ID");

                entity.HasOne(d => d.Power)
                    .WithMany(p => p.tb_map_user_power)
                    .HasForeignKey(d => d.PowerId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("tb_map_user_power_ibfk_2");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.tb_map_user_power)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("tb_map_user_power_ibfk_3");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.tb_map_user_power)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("tb_map_user_power_ibfk_1");
            });

            modelBuilder.Entity<tb_map_user_roles>(entity =>
            {
                entity.Property(e => e.CreateAt).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.RoleId).HasComment("角色ID");

                entity.Property(e => e.UserId).HasComment("用户ID");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.tb_map_user_roles)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("tb_map_user_roles_ibfk_2");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.tb_map_user_roles)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("tb_map_user_roles_ibfk_3");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.tb_map_user_roles)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("tb_map_user_roles_ibfk_1");
            });

            modelBuilder.Entity<tb_rec_authorize>(entity =>
            {
                entity.Property(e => e.AuthExp).HasComment("过期时间");

                entity.Property(e => e.MapPowerId).HasComment("用户与权限映射表ID");

                entity.Property(e => e.MapRoleId).HasComment("用户与角色映射表ID");

                entity.Property(e => e.RefrushCode).HasComment("刷新码");

                entity.Property(e => e.RefrushExp).HasComment("刷新码过期时间");

                entity.Property(e => e.UserId).HasComment("用户ID");

                entity.Property(e => e.createat).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.HasOne(d => d.MapPower)
                    .WithMany(p => p.tb_rec_authorize)
                    .HasForeignKey(d => d.MapPowerId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("tb_rec_authorize_ibfk_2");

                entity.HasOne(d => d.MapRole)
                    .WithMany(p => p.tb_rec_authorize)
                    .HasForeignKey(d => d.MapRoleId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("tb_rec_authorize_ibfk_3");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.tb_rec_authorize)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("tb_rec_authorize_ibfk_1");
            });

            modelBuilder.Entity<tb_rec_license>(entity =>
            {
                entity.Property(e => e.CreateAt).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.EndDate).HasComment("结束时间");

                entity.Property(e => e.OrgId).HasComment("组织ID");

                entity.Property(e => e.StartDate).HasComment("开始时间");

                entity.Property(e => e.licensetype).HasComment("授权类型ID");

                entity.HasOne(d => d.Org)
                    .WithMany(p => p.tb_rec_license)
                    .HasForeignKey(d => d.OrgId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("tb_rec_license_ibfk_1");

                entity.HasOne(d => d.licensetypeNavigation)
                    .WithMany(p => p.tb_rec_license)
                    .HasForeignKey(d => d.licensetype)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("tb_rec_license_ibfk_2");
            });

            modelBuilder.Entity<vw_org_license>(entity =>
            {
                entity.ToView("vw_org_license");

                entity.Property(e => e.End).HasComment("结束时间");

                entity.Property(e => e.LicName).HasComment("授权类型名称");

                entity.Property(e => e.LicNote).HasComment("授权类型说明");

                entity.Property(e => e.OrgCode).HasComment("组织编码");

                entity.Property(e => e.OrgName).HasComment("组织名称");

                entity.Property(e => e.Start).HasComment("开始时间");

                entity.Property(e => e.Status).HasComment("状态名称");
            });

            modelBuilder.Entity<vw_org_user_power>(entity =>
            {
                entity.ToView("vw_org_user_power");

                entity.Property(e => e.FuncName).HasComment("权限方法");

                entity.Property(e => e.Note).HasComment("权限说明");

                entity.Property(e => e.OrgCode).HasComment("组织编码");

                entity.Property(e => e.OrgId).HasComment("组织ID");

                entity.Property(e => e.OrgName).HasComment("组织名称");

                entity.Property(e => e.OrgStatus).HasComment("状态ID");

                entity.Property(e => e.PowerCode).HasComment("权限code");

                entity.Property(e => e.PowerId).HasComment("权限ID");

                entity.Property(e => e.PowerModule).HasComment("权限模块");

                entity.Property(e => e.PowerName).HasComment("权限名称");

                entity.Property(e => e.PowerStatus).HasComment("状态Id");

                entity.Property(e => e.Url).HasComment("授权页面");

                entity.Property(e => e.UserCode).HasComment("用户代码");

                entity.Property(e => e.UserId).HasComment("用户ID");

                entity.Property(e => e.UserName).HasComment("用户名称（昵称）");

                entity.Property(e => e.UserStatus).HasComment("状态");
            });

            modelBuilder.Entity<vw_org_user_role>(entity =>
            {
                entity.ToView("vw_org_user_role");

                entity.Property(e => e.OrgId).HasComment("组织ID");

                entity.Property(e => e.OrgName).HasComment("组织名称");

                entity.Property(e => e.RoleName).HasComment("角色名称");

                entity.Property(e => e.Status).HasComment("状态名称");

                entity.Property(e => e.UserId).HasComment("用户ID");

                entity.Property(e => e.UserName).HasComment("用户名称（昵称）");
            });

            modelBuilder.Entity<vw_role_power>(entity =>
            {
                entity.ToView("vw_role_power");

                entity.Property(e => e.PowerName).HasComment("权限名称");

                entity.Property(e => e.PowerNote).HasComment("权限说明");

                entity.Property(e => e.RoleName).HasComment("角色名称");

                entity.Property(e => e.RoleNote).HasComment("角色说明");

                entity.Property(e => e.Status).HasComment("状态名称");
            });

            modelBuilder.Entity<vw_user_role_power>(entity =>
            {
                entity.ToView("vw_user_role_power");

                entity.Property(e => e.FuncName).HasComment("权限方法");

                entity.Property(e => e.OrgCode).HasComment("组织编码");

                entity.Property(e => e.OrgId).HasComment("组织ID");

                entity.Property(e => e.OrgName).HasComment("组织名称");

                entity.Property(e => e.OrgStatusId).HasComment("状态ID");

                entity.Property(e => e.PowerCode).HasComment("权限code");

                entity.Property(e => e.PowerId).HasComment("权限ID");

                entity.Property(e => e.PowerModule).HasComment("权限模块");

                entity.Property(e => e.PowerName).HasComment("权限名称");

                entity.Property(e => e.PowerNote).HasComment("权限说明");

                entity.Property(e => e.PowerStatusId).HasComment("状态Id");

                entity.Property(e => e.RoleCode).HasComment("角色代码");

                entity.Property(e => e.RoleId).HasComment("角色ID");

                entity.Property(e => e.RoleName).HasComment("角色名称");

                entity.Property(e => e.RoleNote).HasComment("角色说明");

                entity.Property(e => e.RoleStatusId).HasComment("状态");

                entity.Property(e => e.Url).HasComment("授权页面");

                entity.Property(e => e.UserCode).HasComment("用户代码");

                entity.Property(e => e.UserId).HasComment("用户ID");

                entity.Property(e => e.UserName).HasComment("用户名称（昵称）");

                entity.Property(e => e.UserStatusId).HasComment("状态");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}